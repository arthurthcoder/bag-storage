// @bag:start(translate-validation)
function translateValidation()
{
    if ($.validator == undefined) {
        return;
    }

    $.extend($.validator.messages, {
        required: "Campo obrigatório",
        remote: "Campo inválido",
        email: "E-mail inválido",
        url: "URL inválido",
        date: "Data inválida",
        dateISO: "Data inválida (ISO)",
        number: "Número inválido",
        digits: "Digitos inválidos",
        creditcard: "Cartão de credito inválido",
        equalTo: "Campo não confere",
        accept: "Arquivo inválido",
        maxlength: $.validator.format("Máximo {0} caracteres"),
        minlength: $.validator.format("Mínimo {0} caracteres"),
        rangelength: $.validator.format("Informe entre {0} e {1} caracteres"),
        range: $.validator.format("Informe um valor entre {0} e {1}"),
        max: $.validator.format("Informe um valor menor ou igual a {0}"),
        min: $.validator.format("Informe um valor maior ou igual a {0}")
    });
}
// @bag:end(translate-validation)

// @bag:start(simple-login)
$(document).ready(function(){
    // translateValidation();
    $('#simpleLoginForm').validate({
        rules: {
            email: {
                email: true
            },
            password: {
                minlength: 5,
                maxlength: 50
            }
        },
        submitHandler: function(form, e) {
            e.preventDefault();

            const buttonSubmit = $(form).find('[type=submit]');
            buttonSubmit.attr('disabled', 'disabled');
    
            $.ajax({
                url: form.action,
                method: 'POST',
                dataType: 'json',
                data: $(form).serialize()
            }).done(function(response){
                if (response.success) {
                    window.location.href = response.redirect;
                    return;
                }
                
                buttonSubmit.removeAttr('disabled');
                
                const messages = $('#simpleLoginMessages');
                messages.html('<p>'+response.message+'</p>');
                setTimeout(() => messages.html(''), 3000);

            }).fail(function(response){
                buttonSubmit.removeAttr('disabled');
                console.log('error_login', response);
            });
        }
    });
});
// @bag:end(simple-login)

// @bag:start(simple-header)
function simpleHeaderMenu()
{
    const header = $('#simpleHeader');
    const headerMenu = $('#simpleHeaderMenu');
    const size = {
        x: $(window).outerWidth(),
        y: $(window).outerHeight()
    }

    $('#simpleHeaderButtonMobile').on('click', function(){
        headerMenu.css({
            'height': ($(window).outerHeight() - header.outerHeight()) + 'px',
            'top' : header.outerHeight() + 'px'
        });

        header.toggleClass('active');
    });

    $(window).resize(function(e){
        let sizeX = e.target.innerWidth;
        let sizeY = e.target.innerHeight;

        if (size.x != sizeX) {
            header.removeClass('active');
            headerMenu.removeAttr('style');
            size.x = sizeX;
            return;
        }

        if (header.hasClass('active') && size.y != sizeY) {
            headerMenu.css({
                'height': ($(window).outerHeight() - header.outerHeight()) + 'px',
                'top' : header.outerHeight() + 'px'
            });
            size.y = sizeY;
        }
    });
}
// @bag:end(simple-header)

/* @bag:start(validator) */
class Validator
{
    constructor()
    {
        this._fail = false;

        this.config({
            fieldClass: "error",
            fieldClassValidation: "error-validation",
            messageElement: "span",
            messageClass: "error-message"
        });

        this.addValidation("required", (value, valueRule) => {
            if (valueRule == true && value.replace(/ /g, '') == '') {
                return false;
            }

            return true;
        }, "Campo obrigatório");

        this.addValidation("minlength", (value, valueRule) => {
            if (value.replace(/ /g, '').length < valueRule) {
                this._messages.minlength = this._messages.minlength.replace("{{min}}", valueRule);
                return false;
            }

            return true;
        }, "Mínimo {0} caracteres");

        this.addValidation("maxlength", (value, valueRule) => {
            if (value.replace(/ /g, '').length > valueRule) {
                this._messages.maxlength = this._messages.maxlength.replace("{{max}}", valueRule);
                return false;
            }

            return true;
        }, "Máximo {0} caracteres");
    }

    validate(formId, options)
    {
        this._forms = this._forms ?? {};

        this._forms[formId] = {
            element: document.querySelector("#"+formId),
            fields: []
        };

        this._forms[formId]["element"].setAttribute("novalidate", "novalidate");

        this._forms[formId]["element"].querySelectorAll("input, select, textarea").forEach(field => {
            const rules = {};
            const messages = {};

            if (field.hasAttribute("required")) {
                rules.required = true;
            }

            if (field.hasAttribute("minlength")) {
                rules.minlength = parseInt(field.getAttribute("minlength"));
            }

            if (field.hasAttribute("maxlength")) {
                rules.maxlength = parseInt(field.getAttribute("maxlength"));
            }

            options = options ?? {};

            if (options.rules) {
                const index = field.name || field.id;
                const optionsRules = options.rules[index] || options.rules[index];
                
                for (let rule in optionsRules) {
                    rules[rule] = optionsRules[rule];
                }
            }

            for (let rule in rules) {
                let message = this._messages[rule];
                
                if (options.messages) {
                    if (options.messages[index]) {
                        message = options.messages[index][rule] || message;
                    }
                }

                messages[rule] = message.replace("{0}", rules[rule]);
            }

            if (field.type != "submit") {
                this._forms[formId]["fields"].push({
                    element: field,
                    name: field.name,
                    id: field.id,
                    rules: rules,
                    messages: messages
                });
            }
        });

        const checkField = field => {
            let fail = false;

            for (let rule in field.rules) {
                if (!fail) {
                    if (!this.check(field, rule)) {
                        fail = true;
                    }
                }
            }

            return fail;
        };

        this._forms[formId]["fields"].forEach(field => {
            let eventName = "keyup";

            if (field.element.localName == "select") {
                eventName = "change";
            }

            field.element.addEventListener(eventName, e => {
                if (field.element.classList.contains(this._config.fieldClassValidation)) {
                    checkField(field);
                }
            });
        });

        this._forms[formId]["element"].onsubmit = e => {

            this._forms[formId]["fields"].forEach(field => {
                if (checkField(field)) {
                    field.element.classList.add(this._config.fieldClassValidation);
                    this._fail = true;
                }
            });

            if (this._fail) {
                e.preventDefault();
            }else {
                if (typeof options.submit === "function") {
                    options.submit(this._forms[formId]["element"], e);
                }
            }

            this._fail = false;
        }
    }

    action(options)
    {
        const field = options.field;
        const id = (field.element.id || field.element.name) + "-message";

        let element = document.querySelector("#"+id);

        if (options.action == "add") {
            if (element) {
                element.textContent = options.message;
                return;
            }
    
            element = document.createElement(this._config.messageElement);
            element.id = id;
    
            this._config.messageClass.split(" ").forEach(className => {
                element.classList.add(className);
            });
    
            element.textContent = options.message;
    
            const nextElement = field.element.nextElementSibling;
            field.element.parentElement.insertBefore(element, nextElement);

            this._config.fieldClass.split(" ").forEach(className => {
                field.element.classList.add(className);
            });

        }else if (options.action == "remove") {
            if (element) {
                this._config.fieldClass.split(" ").forEach(className => {
                    field.element.classList.remove(className);
                });
                element.remove();
            }
        }
    }

    check(field, rule)
    {
        if (field.rules["required"] !== true && field.element.value.replace(/ /g, '') == '') {
            this.action({
                action: "remove",
                field: field
            });
            return true;
        }

        if (this._validations[rule](field.element.value, field.rules[rule])) {
            this.action({
                action: "remove",
                field: field
            });
            return true;
        }

        this.action({
            action: "add",
            field: field,
            message: field.messages[rule]
        });
        return false;
    }

    messages(messages)
    {
        this._messages = this._messages ?? {};

        for (let message in messages) {
            this._messages[message] = messages[message];
        }
    }

    config(options)
    {
        this._config = this._config ?? {};

        for (let option in options) {
            this._config[option] = options[option];
        }

        return this;
    }

    addValidation(name, validator, message)
    {
        this._validations = this._validations ?? {};
        this._validations[name] = validator;

        const messages = {};
        messages[name] = message;

        this.messages(messages);

        return this;
    }
}

function v()
{
    window.Validator = window.Validator ?? new Validator();
    return window.Validator;
}
/* @bag:end(validator) */

